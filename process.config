params {
  out_dir = ''
  genome_known_sites = ''
}

process {
    errorStrategy = 'retry'
    maxRetries = 1
    withLabel : 'STAR_2_6_0c_AlignReads'  {
      params.alignreads.mem = '35G' 
      time = '24h'
      penv = 'threaded'
      cpus = 2
      memory = params.alignreads.mem	
      publishDir.path = "${params.out_dir}/STAR"
      publishDir.mode = 'copy'
      publishDir.saveAs = {filename -> if (filename.indexOf(".Log.out") > 0) "logs/$filename" 
				       else if  (filename.indexOf(".Log.final.out") > 0) "logs/$filename" 
				       else if  (filename.indexOf(".bam") > 0) "mapped/$filename" 
				       else if  (filename.indexOf(".SJ.out.tab") > 0) "SJ/$filename" 
				       else if  (filename.indexOf(".mate1") > 0) "unmapped/$filename" 
				       else if  (filename.indexOf(".mate2") > 0) "unmapped/$filename" }	 
 
    } 
    withLabel : 'SAMBAMBA_0_6_8_Index' {
      params.sambambaindex.mem = '10G'
      time = '24h'
      penv = 'threaded'
      cpus = 2
      memory = params.sambambaindex.mem
      publishDir.path = "${params.out_dir}/STAR"
      publishDir.mode = 'copy'
      publishDir.saveAs = {filename -> if (filename.indexOf(".bai") > 0) "mapped/$filename" }
    }
    withLabel : 'HTSeq_0_6_0_Count' {
      params.htseqcount.mem = '25G'
      time = '24h'
      penv = 'threaded'
      cpus = 2
      memory = params.htseqcount.mem
      publishDir.path = "${params.out_dir}/HTSeq"
      publishDir.mode = 'copy'
      publishDir.saveAs = {filename -> if (filename.indexOf(".txt") > 0) "read_counts/$filename" }
    }
    withLabel: 'RSeQC_2_6_1' {
      params.rseqc.mem = '25G'
      time = '24h'
      penv = 'threaded'
      cpus = 2
      memory = params.rseqc.mem
      publishDir.path = "${params.out_dir}/QC/RSeQC"
      publishDir.mode = 'copy'
      publishDir.saveAs = {filename ->
                   	  if (filename.indexOf("bam_stat.txt") > 0) "bam_stat/$filename"
              		  else if (filename.indexOf("infer_experiment.txt") > 0) "infer_experiment/$filename"
                          else if (filename.indexOf("read_distribution.txt") > 0) "read_distribution/$filename"
                          else if (filename.indexOf("read_duplication.DupRate_plot.pdf") > 0) "read_duplication/$filename"
                          else if (filename.indexOf("read_duplication.DupRate_plot.r") > 0) "read_duplication/rscripts/$filename"
                          else if (filename.indexOf("read_duplication.pos.DupRate.xls") > 0) "read_duplication/dup_pos/$filename"
                          else if (filename.indexOf("read_duplication.seq.DupRate.xls") > 0) "read_duplication/dup_seq/$filename"
                          else if (filename.indexOf("RPKM_saturation.eRPKM.xls") > 0) "RPKM_saturation/rpkm/$filename"
                          else if (filename.indexOf("RPKM_saturation.rawCount.xls") > 0) "RPKM_saturation/counts/$filename"
                          else if (filename.indexOf("RPKM_saturation.saturation.pdf") > 0) "RPKM_saturation/$filename"
                          else if (filename.indexOf("RPKM_saturation.saturation.r") > 0) "RPKM_saturation/rscripts/$filename"
                          else if (filename.indexOf("inner_distance.txt") > 0) "inner_distance/$filename"
                          else if (filename.indexOf("inner_distance_freq.txt") > 0) "inner_distance/data/$filename"
                          else if (filename.indexOf("inner_distance_plot.r") > 0) "inner_distance/rscripts/$filename"
                          else if (filename.indexOf("inner_distance_plot.pdf") > 0) "inner_distance/plots/$filename"
                          else if (filename.indexOf("junction_plot.r") > 0) "junction_annotation/rscripts/$filename"
                          else if (filename.indexOf("junction.xls") > 0) "junction_annotation/data/$filename"
			  else if (filename.indexOf(".junction_annotation_log.txt") > 0) "junction_annotation/log/$filename"
                          else if (filename.indexOf("splice_events.pdf") > 0) "junction_annotation/events/$filename"
                          else if (filename.indexOf("splice_junction.pdf") > 0) "junction_annotation/junctions/$filename"
                          else if (filename.indexOf("junctionSaturation_plot.pdf") > 0) "junction_saturation/$filename"
                          else if (filename.indexOf("junctionSaturation_plot.r") > 0) "junction_saturation/rscripts/$filename"
                          else filename }
   }
   withLabel: 'Preseq_2_0_3' {
      params.preseq.mem = '15G'
      time = '24h'
      penv = 'threaded'
      cpus = 2
      memory = params.preseq.mem
      publishDir.path = "${params.out_dir}/QC/Preseq"
      publishDir.mode = 'copy'
      publishDir.saveAs = {filename -> if (filename.indexOf(".ccurve.txt") > 0) "complexity_curve/$filename" }
   }
   withLabel : 'SAMBAMBA_markdup_0_6_8' {
      params.sambambamarkdup.mem = '15G'
      time = '24h'
      penv = 'threaded'
      cpus = 2
      memory = params.sambambamarkdup.mem
      publishDir.path = "${params.out_dir}/MarkDup"
      publishDir.mode = 'copy'
      publishDir.saveAs = {filename -> if (filename.indexOf(".bam") > 0) "markdup/$filename"
				       else if (filename.indexOf(".bai") > 0) "markdup/$filename" }
    }
    withLabel : 'GATK_4_1_3_0_SplitNCigarReads' {
      params.gatksplitncigarreads.mem = '12G'
      time = '24h'
      penv = 'threaded'
      cpus = 2
      memory = params.gatksplitncigarreads.mem
    } 
    withLabel : 'Salmon_0_13_1_Quant' {
      params.salmom.mem = '25G'
      time = '24h'
      penv = 'threaded'
      cpus = 2
      memory = params.salmom.mem
      publishDir.path = "${params.out_dir}/Salmon"
      publishDir.mode = 'copy'
    }
    withLabel : 'Fastp_0_14_1' {
      params.fastp.mem = '15G'
      time = '24h'
      penv = 'threaded'
      cpus = 2
      memory = params.fastp.mem
      publishDir.path = "${params.out_dir}/QC/fastp"
      publishDir.mode = 'copy'
      publishDir.saveAs = {filename -> if (filename.indexOf(".fastq.gz") > 0) "clean_reads/$filename" 
				       else if (filename.indexOf(".json") > 0) "log/$filename" }
    }   
    withLabel: 'GATK_splitintervals_4_1_3_0' {
      params.splitintervals.mem = '6G'
      params.splitintervals.toolOptions = ''
      memory = params.splitintervals.mem
      time = '1h'
    }
    withLabel : GATK_baserecalibrator_4_1_3_0 {
      params.baserecalibrator.mem = '9G'
      params.baserecalibrator.toolOptions = ''
      memory = params.baserecalibrator.mem
      time = '1h'
    }
    withLabel : GATK_gatherbaserecalibrator_4_1_3_0 {
      params.gatherbaserecalibrator.mem = '6G'
      memory = params.gatherbaserecalibrator.mem
      time = '1h'
   }
   withLabel : GATK_applybqsr_4_1_3_0 {
      params.applybqsr.mem = '9G'
      memory = params.applybqsr.mem
      time = '1h'
   }
   withLabel : GATK_haplotypecaller_4_1_3_0 {
      params.haplotypecaller.mem = '25G'
      params.haplotypecaller.toolOptions = '--standard-min-confidence-threshold-for-calling 20.0 --dont-use-soft-clipped-bases'
      memory = params.haplotypecaller.mem
      time = '12h'
   }   
   withLabel : GATK_mergevcfs_4_1_3_0 {
      params.mergevcf.mem = '14G'
      params.mergevcfs.toolOptions = ''
      memory = params.mergevcf.mem
      time = '4h'
      publishDir.path = "${params.out_dir}/VCFS"
      publishDir.mode = 'copy'
   }
   withLabel : GATK_variantfiltration_4_1_3_0 {
      params.variantfiltration.mem = '10G'
      params.variantfiltration.toolOptions = '--cluster-window-size 35 --cluster-size 3'
      memory = params.variantfiltration.mem
      time = '4h'
      publishDir.path = "${params.out_dir}/GATK/vcf_filter"
      publishDir.mode = 'copy'
   }
   withLabel : SAMBAMBA_mergebams_0_6_8 {
      params.mergebams.mem = '5G'
      params.mergebams.toolOptions = ''
      container = '/hpc/cog_bioinf/cuppen/personal_data/sander/scripts/Nextflow/Singularity-images/sambamba-0.6.8.squashfs'
      cpus = 10
      penv = 'threaded'
      memory = params.mergebams.mem
      time = '2h'
      publishDir.path = "${params.out_dir}/GATK/bam_recall"
      publishDir.mode = 'copy'
   }
   withLabel : MultiQC_1_8 {
      params.multiqc.mem = '4G'
      params.multiqc.optional = '--interactive'
      memory = params.multiqc.mem
      time = '1h'
      publishDir.path = "${params.out_dir}/QC/summary"
      publishDir.mode = 'copy'
   }
}

   
